

# This file was *autogenerated* from the file kdigit.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_10 = Integer(10)
k=int(input("Enter the number of digits for the prime numbers : "))
class coeff :
    a=_sage_const_0 
    b=_sage_const_0 

def solver(p,q) :
    if p==_sage_const_0  :
        c_end=coeff()
        c_end.a=_sage_const_0 
        c_end.b=_sage_const_1 
        return c_end
    c_end=coeff()
    c_end=solver(q%p,p)
    c_ans=coeff()
    c_ans.b=c_end.a
    c_ans.a=c_end.b - c_end.a * (q//p)
    return c_ans

while True : #to make sure both random primes are distinct
    p=random_prime(_sage_const_10 **k , True , _sage_const_10 **(k-_sage_const_1 )+_sage_const_1 )
    q=random_prime(_sage_const_10 **k , True , _sage_const_10 **(k-_sage_const_1 )+_sage_const_1 )
    if p!=q :
        break
if p>q : #to make sure that p < q as my solver function is using that condition in (q%p) part
    p,q=q,p
print(f"Prime numbers are {p} and {q}")
ans=coeff()
ans=solver(p,q)
soln=(p,q,ans.a,ans.b)
print(f"After solving a*{p} + b*{q} = 1 ")
print(f"The solution in the format of (p,q,a,b) is {soln}") 



    

